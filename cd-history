#!/usr/bin/env python3

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#
# In ~/.bashrc:
#   cd () { local cmd; cmd="$(cd-history "$@")" && eval "$cmd"; }
#   cdh () { cd-history --list | less -S +G "$@"; }
#

# pylint: disable=consider-alternative-union-syntax disable=deprecated-typing-alias
import sys
import os
import re
from typing import Optional, Union, Dict, List, Final, Any, NoReturn
from collections.abc import Callable
from stat import S_ISDIR
from dataclasses import dataclass
import click

THIS_SCRIPT: Final = os.path.basename(sys.argv.pop(0))  # this script's name

if os.environ.get('CD_HISTORY_DEBUG'):
    def debug(*args: Any) -> None:
        print('>', *args, file=sys.stderr)
else:
    def debug(*args: Any) -> None:  # pylint: disable=unused-argument
        pass

MAX_HISTORY: Final = 100
HOME: Final = os.environ['HOME']
HISTORY_FILE_NAME: Final = os.path.join(HOME, '.local', 'cd_history')

CWD: Union[str, None, bool] = None

ABSPATH = os.path.abspath

def die(msg: str) -> NoReturn:
    sys.exit(f'{THIS_SCRIPT}: {msg}')

def get_cwd() -> Optional[str]:
    global CWD
    if CWD is None:
        # The current directory may not actually exist in
        # the file system anymore.
        try:
            CWD = ABSPATH('.')
        except OSError:
            CWD = False
    if isinstance(CWD, bool):
        return None
    return CWD

DEVINO: Final[Dict[str, Optional[str]]] = {}

def get_devino(pathname: str) -> Optional[str]:
    devino = DEVINO.get(pathname, False)
    if devino is not False:
        assert isinstance(devino, str) or devino is None
        return devino
    devino = None
    try:
        st = os.stat(pathname)
        if S_ISDIR(st.st_mode):
            devino = f'{st.st_dev},{st.st_ino}'
        else:
            print(f'{THIS_SCRIPT}: {pathname!r} - Not a directory', file=sys.stderr)
    except OSError as ex:
        print(f'{THIS_SCRIPT}: {pathname!r} - {ex.strerror}', file=sys.stderr)
    DEVINO[pathname] = devino
    return devino

def is_same_dir(here: str, there: Optional[str]) -> bool:
    if there is None:
        return False
    return get_devino(here) == get_devino(there)

@dataclass
class history_entry:
    pathname: str
    num: int
    devino: str

HISTORY: List[history_entry] = []

def append_to_history(pathname: str,
                      num: Optional[int] = None,
                      devino: Optional[str] = None) -> bool:
    """
    Append the given pathname to the HISTORY.
    If already in the HISTORY, move it to the end.
    Return true if any changes are made, false otherwise.
    """
    global HISTORY

    debug('append_to_history', pathname, num, devino)

    if devino is None:
        devino = get_devino(pathname)
        if devino is None:
            print(f'{THIS_SCRIPT}: Discarding {pathname!r}', file=sys.stderr)
            return False
        debug('  devino', devino)

    if num is None:
        num = 1
        for e in HISTORY:
            if e.pathname == pathname or e.devino == devino:
                num = e.num
                break
            if num <= e.num:
                num = e.num + 1
        debug('  num', num)

    if HISTORY:
        last = HISTORY[-1]
        if last.pathname == pathname and last.devino == devino:
            debug('  already have', pathname, devino)
            return False

    HISTORY = [e for e in HISTORY
               if e.pathname != pathname and e.devino != devino]
    HISTORY = HISTORY[1 - MAX_HISTORY:]
    HISTORY.append(history_entry(pathname, num, devino))
    return True

def shell_quote(arg: str) -> str:
    if not re.search(r'[^@%\w:,./=+-]', arg):
        return arg
    return "'" + re.sub(r"'", r"'\''", arg) + "'"

def load_history() -> None:
    try:
        with open(HISTORY_FILE_NAME, 'rt', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        return

    for line in lines:
        line = line.rstrip('\n')
        fields = line.split('\t')
        num_str, devino, pathname = fields
        num = int(num_str)
        append_to_history(pathname, num, devino)
    debug('loaded')

def save_history() -> None:
    tmp = f'{HISTORY_FILE_NAME}.{os.getpid()}~'
    with open(tmp, 'wt', encoding='utf-8') as fh:
        for e in HISTORY:
            print(f'{e.num}\t{e.devino}\t{e.pathname}', file=fh)
    os.rename(tmp, HISTORY_FILE_NAME)

def recent(n: int) -> str:
    i = len(HISTORY) - n - 1
    if i < 0 or i >= len(HISTORY):
        die(f'No HISTORY entry {n}')
    return HISTORY[i].pathname

def best_match(pathname: str) -> str:
    """
    Get the absolute path of the directory that best matches PATHNAME.
    """

    if re.match(r'^-+$', pathname):
        # Some number of dashes (e.g, '-', '--', '---', ... means use one of
        # the last directories in the history.  If the very last directory is
        # the same as the current working directory, then ignore it.  Then use
        # the Nth from last directory in the history where N is the number of
        # dashes.
        return recent(len(pathname))

    if re.match(r'^-\d+$', pathname):
        # '-N' means use the Nth from the last directory in the history.
        return recent(-int(pathname))

    if re.match(r'^\d+$', pathname):
        # 'N' means use directory number N in the history.
        num = int(pathname)
        for e in HISTORY:
            if num == e.num:
                return e.pathname
        die(f'No directory number {num} in history')

    # '%foo' means the directory that ends with 'foo'.
    # '%foo%' means the directory that contains 'foo' anywhere.
    # There must be exactly one match or else it's an error.
    if pathname.startswith('%'):
        base = pathname[1:].lower()
        matches = []
        # pylint: disable=unnecessary-lambda-assignment
        matcher: Callable[[str], bool]
        if pathname.endswith('%'):
            base = base[0:-1]
            matcher = lambda d: base in d
        else:
            matcher = lambda d: d.endswith(base)
        for e in reversed(HISTORY):
            if matcher(e.pathname.lower()):
                matches.append((e.num, e.pathname))
        if not matches:
            die(f'No match: {pathname!r}')
        best = matches.pop(0)

        # If the first match is the current working directory, then use the
        # second match (if there is one).
        if matches and is_same_dir(best[1], get_cwd()):
            best, matches[0] = matches[0], best

        # If there are multiple matches, show the other matches (the dirs
        # we're not going to change to).
        for i in reversed(matches):
            print(i[0], i[1], file=sys.stderr)
        return best[1]

    # If pathname references an existing directory, use it.
    if os.path.isdir(pathname):
        # The Cygwin build of Python will convert "c:/foo" to "/bar/c:/foo"
        # which isn't right...
        if pathname[1:3] == ':/':
            pathname = f'/cygdrive/{pathname[0]}/{pathname[3:]}'
        return ABSPATH(pathname)

    die(f'No such directory: {pathname!r}')

def append_cwd() -> bool:
    cwd = get_cwd()
    if not cwd:
        print(f'{THIS_SCRIPT}: Can\'t determine current directory',
              file=sys.stderr)
        return False

    devino = get_devino(cwd)
    if devino is None:
        print(f'{THIS_SCRIPT}: Can\'t determine current directory',
              file=sys.stderr)
        return False
    debug('cwd', cwd)

    # If cwd is already in history, use that pathname which might be a
    # different alias for what we determined with ABSPATH.
    for e in HISTORY:
        if e.devino == devino:
            cwd = e.pathname
            debug('cwd is already in history as', cwd)
            break

    return append_to_history(cwd, devino=devino)

def change_dir(pathname: str) -> None:
    # Always store the current directory to the history before appending the
    # new directory.
    changed = False
    if append_cwd():
        changed = True
    if append_to_history(pathname):
        changed = True
    if changed:
        save_history()
    # Print the bash command to chdir to the selected directory.
    e = HISTORY[-1]
    print(e.num, e.pathname, file=sys.stderr)
    print('builtin', 'cd', shell_quote(pathname))

def show_history() -> None:
    load_history()
    if append_cwd():
        save_history()
    print(f'{HISTORY_FILE_NAME}:')
    for e in HISTORY:
        try:
            os.listdir(e.pathname)
            err = ''
        except OSError as exc:
            err = f' [{exc.strerror}]'
        print(f'{"!" if err else " "}{e.num:3} {e.pathname}{err}')

@click.command()
@click.option('--list', '-l', 'do_list', is_flag=True, help="""
Show the directory history
""")
@click.argument('directory', required=False)
def main(do_list: bool = False,
         directory: Optional[str] = None) -> None:
    if do_list:
        show_history()
        return
    load_history()
    if directory:
        pathname = best_match(directory)
        change_dir(pathname)
    else:
        change_dir(HOME)

main()
