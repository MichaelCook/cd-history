#!/usr/bin/env python3

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#
# In ~/.bashrc:
#   cd () { local cmd; cmd="$(cd-history "$@")" && eval "$cmd"; }
#   cdh () { cd-history --list | less -S +G "$@"; }
#

import sys
import os
import re
from stat import S_ISDIR

THIS_SCRIPT = os.path.basename(sys.argv.pop(0)) # this script's name

if os.environ.get('CD_HISTORY_DEBUG'):
    def debug(*args):
        print('>', *args, file=sys.stderr)
else:
    def debug(*_args):
        pass

MAX_HISTORY = 100
HOME = os.environ['HOME']
HISTORY_FILE_NAME = os.path.join(HOME, '.local', 'cd_history')

CWD = None

def get_cwd():
    global CWD
    if CWD is None:
        # The current directory may not actually exist in
        # the file system anymore.
        try:
            CWD = os.path.abspath('.')
        except FileNotFoundError:
            CWD = False
    return CWD

DEVINO = {}

def get_devino(pathname):
    devino = DEVINO.get(pathname, False)
    if devino is not False:
        return devino
    devino = None
    try:
        st = os.stat(pathname)
        if S_ISDIR(st.st_mode):
            devino = f'{st.st_dev},{st.st_ino}'
        else:
            print(f'{THIS_SCRIPT}: {pathname!r} - Not a directory', file=sys.stderr)
    except OSError as ex:
        print(f'{THIS_SCRIPT}: {pathname!r} - {ex.strerror}', file=sys.stderr)
    DEVINO[pathname] = devino
    return devino

def is_same_dir(here, there):
    if there is None:
        return False
    return get_devino(here) == get_devino(there)

class history_entry:
    def __init__(self, pathname, num, devino):
        self.pathname = pathname
        self.num = num
        self.devino = devino

HISTORY = []

def append_to_history(pathname, num=None, devino=None):
    """
    Append the given pathname to the HISTORY.
    If already in the HISTORY, move it to the end.
    Return true if any changes are made, false otherwise.
    """
    global HISTORY

    debug('append_to_history', pathname, num, devino)

    if devino is None:
        devino = get_devino(pathname)
        if devino is None:
            print(f'{THIS_SCRIPT}: Discarding {pathname!r}', file=sys.stderr)
            return False
        debug('  devino', devino)

    if num is None:
        num = 1
        for e in HISTORY:
            if e.pathname == pathname or e.devino == devino:
                num = e.num
                break
            if num <= e.num:
                num = e.num + 1
        debug('  num', num)

    if HISTORY:
        last = HISTORY[-1]
        if last.pathname == pathname and last.devino == devino:
            debug('  already have', pathname, devino)
            return False

    HISTORY = [e for e in HISTORY
               if e.pathname != pathname and e.devino != devino]
    HISTORY = HISTORY[1-MAX_HISTORY:]
    HISTORY.append(history_entry(pathname, num, devino))
    return True

def shell_quote(s):
    if not re.search(r'[^@%\w:,./=+-]', s):
        return s
    return "'" + re.sub(r"'", r"'\''", s) + "'"

def load_history():
    try:
        with open(HISTORY_FILE_NAME, 'rt') as f:
            lines = f.readlines()
    except FileNotFoundError:
        return

    for line in lines:
        line = line.rstrip('\n')
        fields = line.split('\t')
        if len(fields) == 2:
            num, pathname = fields
            devino = get_devino(pathname)
            if devino is None:
                continue
        else:
            num, devino, pathname = fields

        num = int(num)
        append_to_history(pathname, num, devino)
    debug('loaded')

def save_history():
    tmp = f'{HISTORY_FILE_NAME}.{os.getpid()}~'
    with open(tmp, 'wt') as fh:
        for e in HISTORY:
            print(f'{e.num}\t{e.devino}\t{e.pathname}', file=fh)
    os.rename(tmp, HISTORY_FILE_NAME)

def recent(n):
    i = len(HISTORY) - n - 1
    if i < 0 or i >= len(HISTORY):
        sys.exit(f'{THIS_SCRIPT}: No HISTORY entry {n}')
    return HISTORY[i].pathname

def best_match(pathname):
    """
    Get the absolute path of the directory that best matches PATHNAME.
    """

    if re.match(r'^-+$', pathname):
        # Some number of dashes (e.g, '-', '--', '---', ... means use one of
        # the last directories in the history.  If the very last directory is
        # the same as the current working directory, then ignore it.  Then use
        # the Nth from last directory in the history where N is the number of
        # dashes.
        return recent(len(pathname))

    if re.match(r'^-\d+$', pathname):
        # '-N' means use the Nth from the last directory in the history.
        return recent(-int(pathname))

    if re.match(r'^\d+$', pathname):
        # 'N' means use directory number N in the history.
        num = int(pathname)
        for e in HISTORY:
            if num == e.num:
                return e.pathname
        sys.exit(f'{THIS_SCRIPT}: No directory number {num} in history')

    # '%foo' means the directory that ends with 'foo'.
    # '%foo%' means the directory that contains 'foo' anywhere.
    # There must be exactly one match or else it's an error.
    if pathname.startswith('%'):
        base = pathname[1:].lower()
        matches = list()
        if pathname.endswith('%'):
            base = base[0:-1]
            matcher = lambda d: base in d
        else:
            matcher = lambda d: d.endswith(base)
        for e in reversed(HISTORY):
            if matcher(e.pathname.lower()):
                matches.append((e.num, e.pathname))
        if not matches:
            sys.exit(f'{THIS_SCRIPT}: No match: {pathname!r}')
        best = matches.pop(0)

        # If the first match is the current working directory, then use the
        # second match (if there is one).
        if matches and is_same_dir(best[1], get_cwd()):
            best, matches[0] = matches[0], best

        # If there are multiple matches, show the other matches (the dirs
        # we're not going to change to).
        for i in reversed(matches):
            print(i[0], i[1], file=sys.stderr)
        return best[1]

    # If pathname references an existing directory, use it.
    if os.path.isdir(pathname):
        return os.path.abspath(pathname)

    sys.exit(f'{THIS_SCRIPT}: No such directory: {pathname!r}')

def append_cwd():
    cwd = get_cwd()
    if not cwd:
        print(f'{THIS_SCRIPT}: Can\'t determine current directory',
              file=sys.stderr)
        return False

    devino = get_devino(cwd)
    if devino is None:
        print(f'{THIS_SCRIPT}: Can\'t determine current directory',
              file=sys.stderr)
        return False
    debug('cwd', cwd)

    # If cwd is already in history, use that pathname which might be a
    # different alias for what we determined with os.path.abspath.
    for e in HISTORY:
        if e.devino == devino:
            cwd = e.pathname
            debug('cwd is already in history as', cwd)
            break

    return append_to_history(cwd, devino=devino)

def change_dir(pathname):
    # Always store the current directory to the history before appending the
    # new directory.
    changed = False
    if append_cwd():
        changed = True
    if append_to_history(pathname):
        changed = True
    if changed:
        save_history()
    # Print the bash command to chdir to the selected directory.
    e = HISTORY[-1]
    print(e.num, e.pathname, file=sys.stderr)
    print('builtin', 'cd', shell_quote(pathname))

def show_history():
    load_history()
    if append_cwd():
        save_history()
    for e in HISTORY:
        print(f'{e.num:4} {e.pathname}')

# ----------------------------------------------------------------------------

def main():
    if len(sys.argv) == 1 and sys.argv[0] == '--list':
        show_history()
    elif len(sys.argv) == 1:
        load_history()
        pathname = best_match(sys.argv.pop(0))
        change_dir(pathname)
    elif len(sys.argv) == 0:
        load_history()
        change_dir(HOME)
    else:
        sys.exit(f'{THIS_SCRIPT}: Wrong number of arguments: {sys.argv:r}')

main()
